import base64
import requests
import json
import re
import os
from ibm_watson import SpeechToTextV1, TextToSpeechV1, AssistantV1, ApiException
from ibm_cloud_sdk_core.authenticators import IAMAuthenticator


def get_token():
    """
        Responsável por obter o token de validação
    """
    client_id = ''
    secret = ''
    url = ""

    to_token = client_id + ':' + secret
    payload = "grant_type=client_credentials&scope=urn:opc:resource:consumer::all"
    encoded = base64.b64encode(to_token.encode("ascii"))
    headers = {
        'authorization': 'Basic ' + encoded.decode(),
        'content-type': 'application/x-www-form-urlencoded'
    }
    response = requests.request("POST", url, headers=headers, data=payload)
    if (response.status_code >= 200 and response.status_code <= 299):
        retorno = response.json()
        retorno['statuscode'] = 200
    else:
        retorno['statuscode'] = response.status_code

    return retorno


def send_transaction(token):
    url = "https://af3tqle6wgdocsdirzlfrq7w5m.apigateway.sa-saopaulo-1.oci.customer-oci.com/fiap-sandbox/accounts/v1/accounts/00711234511/transfers"

    payload = {
        "Type": "TEF",
        "TransactionInformation": "Mensalidade Academia",
        "DestinyAccount": {
            "Bank": "422",
            "Agency": "0071",
            "Id": "1234533",
            "Cpf": "12345678933",
            "Name": "Mark Zuckerberg da Silva",
            "Goal": "Credit"
        },
        "Amount": {
            "Amount": "250.00",
            "Currency": "BRL"
        }
    }
    json_object = json.dumps(payload)

    headers = {
        'Content-Type':
        'application/json',
        'Authorization':
        'Bearer eyJ4NXQjUzI1NiI6IlNhWkUtSjdJdDBQWFRYNFlCaTBCeXk4WWhPVlJkSzlNNXgzREN3R2ZnbkEiLCJ4NXQiOiJVSWpBeHIyTWlzNk9JdTNMS2NsX3JPSHl3eXMiLCJraWQiOiJTSUdOSU5HX0tFWSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI5NGVkMDNhZDljOGI0YjA3OWZmMjhlYzg1NGZhYjgwMSIsImd0cCI6ImNjIiwidXNlci50ZW5hbnQubmFtZSI6ImlkY3MtOTAyYTk0NGZmNjg1NGM1ZmJlOTQ3NTBlNDhkNjZiZTUiLCJzdWJfbWFwcGluZ2F0dHIiOiJ1c2VyTmFtZSIsInByaW1UZW5hbnQiOnRydWUsImlzcyI6Imh0dHBzOlwvXC9pZGVudGl0eS5vcmFjbGVjbG91ZC5jb21cLyIsInRva190eXBlIjoiQVQiLCJjbGllbnRfaWQiOiI5NGVkMDNhZDljOGI0YjA3OWZmMjhlYzg1NGZhYjgwMSIsImNhX2d1aWQiOiJjYWNjdC1iOThlNGJjZDQ1MDU0YjZlOTc3NzU5OThiNmYzNmYwNiIsImF1ZCI6InVybjpvcGM6cmVzb3VyY2U6c2NvcGU6YWNjb3VudCIsInN1Yl90eXBlIjoiY2xpZW50Iiwic2NvcGUiOiJ1cm46b3BjOnJlc291cmNlOmNvbnN1bWVyOjphbGwiLCJjbGllbnRfdGVuYW50bmFtZSI6ImlkY3MtOTAyYTk0NGZmNjg1NGM1ZmJlOTQ3NTBlNDhkNjZiZTUiLCJleHAiOjE1OTk4NTcxOTEsImlhdCI6MTU5OTg1MzU5MSwidGVuYW50X2lzcyI6Imh0dHBzOlwvXC9pZGNzLTkwMmE5NDRmZjY4NTRjNWZiZTk0NzUwZTQ4ZDY2YmU1LmlkZW50aXR5Lm9yYWNsZWNsb3VkLmNvbTo0NDMiLCJjbGllbnRfZ3VpZCI6ImVhYzUyODkwMWQwYTQ1MGY5MTllZjg0Y2QxNmI2ZjEwIiwiY2xpZW50X25hbWUiOiJUaW1lIDEwIiwidGVuYW50IjoiaWRjcy05MDJhOTQ0ZmY2ODU0YzVmYmU5NDc1MGU0OGQ2NmJlNSIsImp0aSI6IjExZWFmNDY3N2RjNjJlM2ZiODc2YjMwMDU2MTRjMzczIn0.t5XVfruS0M4Wz-Idee42hN_y3-iTQkJTRty0WaMl6RGjQkI-_dF104LXkovW0UA86BKoy9C8J39uIZgLCzpQS-PQcAltWGP1OGvb23bGNIzxI2fjCVbxebH4gAqZCGDCxpUKxcmuA6Znzil6PxctTk0vlfgDUAWlw7SWuV2V8PxW78ZYNjAa325XOVi-FzbXc7J3PIforP8PFINz_WgTHStr83wF-FAO4qNNL6Gjw5mqJJjbYq_SgaAhQpATQNQ2jGwEGiWYKzONHrZ3G7tq5rwGm80wuCywZeCCNbx4GG3xXh3zYNwLLH9udUo3q_yAK-Br8x9UDqj3t52g3sWgcg'
    }
    response = requests.request("POST", url, headers=headers, data=json_object)
    if (response.status_code >= 200 and response.status_code <= 299):
        retorno = response.json()
    else:
        retorno['statuscode'] = 404


def get_extrato(intencao, tipoGasto):
    """
        Responsável por realizar a consulta de extrato bancário
    """
    response_token = get_token()

    retorno = dict()
    if (response_token['statuscode'] == 200):
        token = response_token['access_token']
    else:
        return retorno['statuscode'] == 405

    url = 'https://af3tqle6wgdocsdirzlfrq7w5m.apigateway.sa-saopaulo-1.oci.customer-oci.com/fiap-sandbox/open-banking/v1/accounts/00711234522/transactions'

    auth = 'Bearer ' + token
    headers = {
        'Content-Type': 'application/json',
        'Authorization': auth,
    }
    response = requests.request("GET", url, headers=headers)
    retorno = dict()
    if (response.status_code >= 200 and response.status_code <= 299):
        #retorno = response.json()
        extrato = response.json()
        retorno['statuscode'] = 200
        if (intencao == 'extrato_completo'):
            retorno['response'] = 'extrato_completo'
            return retorno
        elif (intencao == 'tipo_gasto'):
            for transaction in extrato['data']['transaction']:
                informacao = transaction['transactionInformation']
                if (tipoGasto.lower() in informacao.lower()):
                    retorno['response'] = 'positivo'
                else:
                    retorno['response'] = 'negativo'

    else:
        retorno['statuscode'] = response.status_code

    return retorno


def string2number(str):
    #numberlist = [int(s) for s in str.split() if s.isdigit()]
    numberlist = re.findall(r'\d+', str)
    if (len(numberlist) == 1):
        return numberlist[0]

    numberAnterior = None
    final_list = []
    sequencial = 0
    for number in numberlist:
        sequencial = sequencial + 1
        if (numberAnterior is None):
            numberAnterior = number
            #print(numberAnterior)
        else:
            number_decimal = numberAnterior + '.' + number
            #print(number_decimal)
            if (number_decimal in str):

                final_list.append(number_decimal)
                numberAnterior = None
            else:
                if (sequencial == len(numberlist)):
                    final_list.append(numberAnterior)
                    final_list.append(number)
                else:
                    final_list.append(numberAnterior)
                    numberAnterior = number

    return final_list


#audio_bytes = decodeAudio(
#    os.path.dirname(os.path.abspath(__file__)) + '\\BemVindo01.wav',
#    'teste.wav')
#print(audio_bytes.decode("utf-8"))
#audiofile = decodeAudio(audio_bytes.decode("utf-8"),
#                       "teste.txt")
#bytes(audio_bytes.decode("utf-8"), 'utf-8')
"""

print(
    encodeAudio(
        os.path.dirname(os.path.abspath(__file__)) +
        '\\BemVindo01.wav').decode("utf-8"))
path_arquivo = os.path.dirname(os.path.abspath(__file__)) + '\\BemVindo01.wav'
audio_encode = encodeAudio(path_arquivo).decode("utf-8")
audiofile = decodeAudio(audio_encode, "teste.wav")
"""

#message = "Python is fun"

#print(encoded_audio)
#base64.b64decode(encoded_audio)
#message_bytes = encoded_audio.decode("utf-8")
#print(message_bytes)
#base64_bytes = base64.b64encode(encoded_audio)
#base64_message = base64_bytes.decode('ascii')

#print(base64_message)
#print('bytes >>>>>>>>>>>>', message_bytes.encode("utf-8"))
#message_bytes = base64.b64decode(message_bytes.encode("utf-8"))
#print('bytes >>>>>>>>>>>>', message_bytes)
#encode_audio = base64.b64encode(open("BemVindo01.wav", "rb").read())
#base64_message = ''
#base64_bytes = base64_message.encode('ascii')
#message_bytes = base64.b64decode(base64_bytes)
#message = message_bytes.decode('ascii')

#print(message)


def encode64_byte_to_texto(bytes):
    encoded_audio = base64.b64encode(bytes)
    byte2text = encoded_audio.decode("utf-8")
    print(len(byte2text))
    return byte2text


def write2file(text, nome_file):
    #request = encode64_byte_to_texto(byte_audio)
    wav_file = open(nome_file, "wb+")
    wav_file.write(text)


def decode64_text_to_byte(text):
    text2bytes = text.encode("utf-8")
    bytes_real = base64.b64decode(text2bytes)
    return bytes_real


#base64text = 'te'
#print(decode64_text_to_byte(base64text))
#write2file(decode64_text_to_byte(base64text), 'teste.wav')

#nome_arquivo = "Intencao07.wav"
#bytes_file = open(nome_arquivo, "rb").read()
#print(teste)
#print(os.path.dirname(os.path.abspath(__file__)) + '\\BemVindo01.wav')

#encoded_audio = base64.b64encode(open(nome_arquivo, "rb").read())
#request = encode64_byte_to_texto(bytes_file)
#write2file(request.encode("utf-8"), 'Intencao07.txt')
#print(request)


# response = decode64_text_to_byte(base64teste)
# print(response)
def text2int(textnum, numwords={}):
    if not numwords:
        units = [
            "zero",
            "um",
            "dois",
            "três",
            "quatro",
            "cinco",
            "seis",
            "sete",
            "oito",
            "nove",
            "dez",
            "onze",
            "doze",
            "treze",
            "quatorze",
            "quinze",
            "dezesseis",
            "dezesete",
            "dezoito",
            "dezenove",
        ]

        tens = [
            "", "", "vinte", "trinta", "quarenta", "cinquenta", "sessenta",
            "setenta", "oitenta", "noventa"
        ]

        centenas = [
            "", "cento", "duzentos", "trezentos", "quatrocentos", "quinhentos",
            "seiscentos", "setecentos", "oitocentos", "novecentos"
        ]

        scales = ["mil", "milh", "bilh", "trilh"]

        numwords["e"] = (1, 0)
        for idx, word in enumerate(units):
            numwords[word] = (1, idx)
        for idx, word in enumerate(tens):
            numwords[word] = (1, idx * 10)
        for idx, word in enumerate(centenas):
            numwords[word] = (1, idx * 100)
        for idx, word in enumerate(scales):
            numwords[word] = (10**(idx * 3 or 2), 0)

    current = result = 0
    for word in textnum.split():
        if word not in numwords:
            print(word)
            continue
            #raise Exception("Illegal word: " + word)

        scale, increment = numwords[word]
        current = current * scale + increment
        if scale > 100:
            result += current
            current = 0

    return result + current


# text2int("quero fazer uma transferência de cem reais pimentões ")
audio_encode = ''


def decodeAudio(encoded_audio, nome_arquivo):
    """
    Função utilizada para desconversão base64
    :param encoded_audio: Arquivo de texto encoded
    :param nome_arquivo:Nome do arquivo de audios
    :author: Ellen Giacometti
    """

    base64_bytes = encoded_audio.encode('utf-8')
    print(base64_bytes)
    message_bytes = base64.b64decode(base64_bytes)
    wav_file = open(nome_arquivo, "wb+")
    wav_file.write(message_bytes)


def voz2TextoBytes(byte_file):
    print('entrou voz2TextoBytes')
    """
    Função que converte o audio do cliente para um arquivo de texto
    :param nome_audio: Nome do arquivo de audios
    :return: script - Variável de texto  contendo as falas do cliente.
    :author: Ellen Giacometti
    """
    secret = ""
    url = ""
    try:
        authenticator = IAMAuthenticator(secret)

        voztexto_service = SpeechToTextV1(authenticator=authenticator)
        voztexto_service.set_service_url(url)

        watson_resultado = voztexto_service.recognize(
            audio=byte_file,
            model='pt-BR_BroadbandModel',
            content_type='audio/wav',
            word_alternatives_threshold=0.9).get_result()
        script = ""

        while bool(watson_resultado.get('results')):
            script = watson_resultado.get('results').pop().get(
                'alternatives').pop().get('transcript') + script[:]
    except ApiException as ex:
        print("Method failed with status code ", str(ex.code), ": ",
              ex.message)
    print('script', script)
    return script


def voz2Texto(nome_audio):
    print("entrou no voz to text")
    """
    Função que converte o audio do cliente para um arquivo de texto
    :param nome_audio: Nome do arquivo de audios
    :return: script - Variável de texto  contendo as falas do cliente.
    :author: Ellen Giacometti
    """
    script = ""
    try:
        secret = ""
        url = ""
        authenticator = IAMAuthenticator(secret)
        voztexto_service = SpeechToTextV1(authenticator=authenticator)
        voztexto_service.set_service_url(url)
        with open(nome_audio, 'rb') as audio_file:

            watson_resultado = voztexto_service.recognize(
                audio=audio_file,
                model='pt-BR_BroadbandModel',
                content_type='application/octet-stream',
                word_alternatives_threshold=0.9).get_result()

        print("31 - interface ibm")
        while bool(watson_resultado.get('results')):
            script = watson_resultado.get('results').pop().get(
                'alternatives').pop().get('transcript') + script[:]
    except ApiException as ex:
        print("Method failed with status code ", str(ex.code), ": ",
              ex.message)
    print("31 - interface ibm: retorno: ", watson_resultado.get('results'))
    return script


nome_arquivo = 'teste.mpeg'
decodeAudio(audio_encode, nome_arquivo)
text_audio = voz2Texto(nome_arquivo)